{
    "openapi": "3.0.0",
    "info": {
        "version": "4.1",
        "title": "Git",
        "description": "",
        "termsOfService": "https:\/\/go.microsoft.com\/fwlink\/?LinkId=329770"
    },
    "servers": [
        "http:\/\/fabrikam-fiber-inc.visualstudio.com\/"
    ],
    "paths": {
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/cherryPicks": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "CherryPicksGetCherryPickForRefName",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "refName",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "",
                "description": "",
                "operationId": "CherryPicksCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/diffs\/commits": {
            "get": {
                "summary": "",
                "description": "Get differences in committed items between two commits.",
                "operationId": "CommitDiffsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "diffCommonCommit",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "baseVersionDescriptor",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "targetVersionDescriptor",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/commits\/{commitId}": {
            "get": {
                "summary": "",
                "description": "Retrieve a particular commit.",
                "operationId": "CommitsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "commitId",
                        "in": "path",
                        "description": "The id of the commit."
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "changeCount",
                        "in": "query",
                        "description": "The number of changes to include in the result."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/commits": {
            "get": {
                "summary": "",
                "description": "Retrieve git commits for a project",
                "operationId": "CommitsGetCommits",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "searchCriteria",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/commitsbatch": {
            "post": {
                "summary": "",
                "description": "Retrieve git commits for a project",
                "operationId": "CommitsBatchList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "includeStatuses",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/deletedrepositories": {
            "get": {
                "summary": "",
                "description": "Retrieve deleted git repositories.",
                "operationId": "DeletedRepositoriesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryNameOrId}\/forkSyncRequests": {
            "post": {
                "summary": "",
                "description": "Request that another repository's refs be fetched into this one.",
                "operationId": "ForkSyncRequestsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryNameOrId",
                        "in": "path",
                        "description": "ID or name of the repository."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieve all requested fork sync operations on this repository.",
                "operationId": "ForkSyncRequestsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryNameOrId",
                        "in": "path",
                        "description": "ID or name of the repository."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeAbandoned",
                        "in": "query",
                        "description": "True to include abandoned requests."
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryNameOrId}\/forkSyncRequests\/{forkSyncOperationId}": {
            "get": {
                "summary": "",
                "description": "Get a specific fork sync operation's details.",
                "operationId": "ForkSyncRequestsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryNameOrId",
                        "in": "path",
                        "description": "ID or name of the repository."
                    },
                    {
                        "name": "forkSyncOperationId",
                        "in": "path",
                        "description": "OperationId of the sync request."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryNameOrId}\/forks\/{collectionId}": {
            "get": {
                "summary": "",
                "description": "Retrieve all forks of a repository in the collection.",
                "operationId": "ForksList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryNameOrId",
                        "in": "path",
                        "description": "ID or name of the repository."
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "Team project collection ID."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/importRequests": {
            "post": {
                "summary": "",
                "description": "Create an import request",
                "operationId": "ImportRequestsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieve import requests for a repository",
                "operationId": "ImportRequestsQuery",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "includeAbandoned",
                        "in": "query",
                        "description": "True to include abandoned requests."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/importRequests\/{importRequestId}": {
            "get": {
                "summary": "",
                "description": "Retrieve a particular import request",
                "operationId": "ImportRequestsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "importRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Update an import request",
                "operationId": "ImportRequestsUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "importRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/items\/{path}": {
            "get": {
                "summary": "",
                "description": "Get Item Metadata and\/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
                "operationId": "ItemsGetItem",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "scopePath",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "recursionLevel",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "includeContentMetadata",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "latestProcessedChange",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "versionDescriptor",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/items": {
            "get": {
                "summary": "",
                "description": "Get Item Metadata and\/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
                "operationId": "ItemsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "scopePath",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "recursionLevel",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "includeContentMetadata",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "latestProcessedChange",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "versionDescriptor",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/itemsbatch": {
            "post": {
                "summary": "",
                "description": "Post for retrieving a creating a batch out of a set of items in a repo \/ project given a list of paths or a long path",
                "operationId": "ItemsBatchList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/attachments\/{fileName}": {
            "post": {
                "summary": "",
                "description": "Create a new attachment",
                "operationId": "PullRequestAttachmentsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestAttachmentsDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestAttachmentsGetAttachmentContent",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/attachments": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestAttachmentsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/threads\/{threadId}\/comments\/{commentId}\/likes": {
            "post": {
                "summary": "",
                "description": "Add a like on a comment.",
                "operationId": "PullRequestCommentLikesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "",
                "description": "Delete a like on a comment.",
                "operationId": "PullRequestCommentLikesDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get likes for a comment.",
                "operationId": "PullRequestCommentLikesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/commits": {
            "get": {
                "summary": "",
                "description": "Retrieve pull request's commits",
                "operationId": "PullRequestCommitsGetPullRequestCommits",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations\/{iterationId}\/commits": {
            "get": {
                "summary": "",
                "description": "Get the commits for an iteration.",
                "operationId": "PullRequestCommitsGetPullRequestIterationCommits",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations\/{iterationId}\/changes": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestIterationChangesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "compareTo",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations\/{iterationId}\/statuses": {
            "post": {
                "summary": "",
                "description": "Create a pull request status on the iteration. This method will have the same result as CreatePullRequestStatus with specified iterationId in the request body.\n\nThe only required field for the status is Context.Name that uniquely identifies the status.\n            Note that iterationId in the request body is optional since iterationId is specified in the URL.\n            A conflict between iterationId in the URL and iterationId in the request body will result in status code 400.",
                "operationId": "PullRequestIterationStatusesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get all the statuses associated with a pull request iteration.",
                "operationId": "PullRequestIterationStatusesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Update pull request iteration statuses collection. The only supported operation type is 'remove'.\n\nThe path of the 'remove' operation should refer to the ID of the pull request status. For example path=\"\/1\"\n            refers to the pull request status with ID 1.",
                "operationId": "PullRequestIterationStatusesUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations\/{iterationId}": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestIterationsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestIterationsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeCommits",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/labels\/{labelIdOrName}": {
            "delete": {
                "summary": "",
                "description": "Removes a label from the set of those assigned to the pull request.",
                "operationId": "PullRequestLabelsDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "labelIdOrName",
                        "in": "path",
                        "description": "The name or ID of the label requested."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieves a single label that has been assigned to a pull request.",
                "operationId": "PullRequestLabelsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "labelIdOrName",
                        "in": "path",
                        "description": "The name or ID of the label requested."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullrequestquery": {
            "post": {
                "summary": "",
                "description": "Query for pull requests",
                "operationId": "PullRequestQueryGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/reviewers\/{reviewerId}": {
            "put": {
                "summary": "",
                "description": "Adds a reviewer to a git pull request",
                "operationId": "PullRequestReviewersCreatePullRequestReviewer",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "reviewerId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "",
                "description": "Removes a reviewer from a git pull request",
                "operationId": "PullRequestReviewersDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "reviewerId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieve a reviewer from a pull request",
                "operationId": "PullRequestReviewersGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "reviewerId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/reviewers": {
            "post": {
                "summary": "",
                "description": "Adds reviewers to a git pull request",
                "operationId": "PullRequestReviewersCreatePullRequestReviewers",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieve a pull request reviewers",
                "operationId": "PullRequestReviewersList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Resets multiple reviewer votes in a batch",
                "operationId": "PullRequestReviewersUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/share": {
            "post": {
                "summary": "",
                "description": "",
                "operationId": "PullRequestShareSharePullRequest",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/statuses": {
            "post": {
                "summary": "",
                "description": "Create a pull request status.\n\nThe only required field for the status is Context.Name that uniquely identifies the status.\n            Note that you can specify iterationId in the request body to post the status on the iteration.",
                "operationId": "PullRequestStatusesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get all the statuses associated with a pull request.",
                "operationId": "PullRequestStatusesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Update pull request statuses collection. The only supported operation type is 'remove'.\n\nThe path of the 'remove' operation should refer to the ID of the pull request status. For example path=\"\/1\"\n            refers to the pull request status with ID 1.",
                "operationId": "PullRequestStatusesUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/statuses\/{statusId}": {
            "delete": {
                "summary": "",
                "description": "Delete pull request status.",
                "operationId": "PullRequestStatusesDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "ID of the pull request status."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.",
                "operationId": "PullRequestStatusesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "ID of the pull request status."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/threads\/{threadId}\/comments": {
            "post": {
                "summary": "",
                "description": "Create a pull request review comment",
                "operationId": "PullRequestThreadCommentsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get all pull request comments in a thread.",
                "operationId": "PullRequestThreadCommentsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/threads\/{threadId}\/comments\/{commentId}": {
            "delete": {
                "summary": "",
                "description": "Delete a pull request comment by id for a pull request",
                "operationId": "PullRequestThreadCommentsDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get a pull request comment by id for a pull request",
                "operationId": "PullRequestThreadCommentsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Update a pull request review comment thread",
                "operationId": "PullRequestThreadCommentsUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/threads": {
            "post": {
                "summary": "",
                "description": "Create a pull request review comment thread",
                "operationId": "PullRequestThreadsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get all pull request comment threads.",
                "operationId": "PullRequestThreadsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "iteration",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "baseIteration",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/threads\/{threadId}": {
            "get": {
                "summary": "",
                "description": "Get a pull request comment thread by id for a pull request",
                "operationId": "PullRequestThreadsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "iteration",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "baseIteration",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Update a pull request review comment thread",
                "operationId": "PullRequestThreadsUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/workitems": {
            "get": {
                "summary": "",
                "description": "Retrieve a pull request work items",
                "operationId": "PullRequestWorkItemsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullrequests": {
            "post": {
                "summary": "",
                "description": "Create a git pull request",
                "operationId": "PullRequestsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "supportsIterations",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Query for pull requests",
                "operationId": "PullRequestsGetPullRequests",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "searchCriteria",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "maxCommentLength",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullrequests\/{pullRequestId}": {
            "get": {
                "summary": "",
                "description": "Retrieve a pull request",
                "operationId": "PullRequestsGetPullRequest",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "maxCommentLength",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "includeCommits",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "includeWorkItemRefs",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Updates a pull request",
                "operationId": "PullRequestsUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/_apis\/git\/pullrequests\/{pullRequestId}": {
            "get": {
                "summary": "",
                "description": "Get a pull request using its ID",
                "operationId": "PullRequestsGetPullRequestById",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/pullrequests": {
            "get": {
                "summary": "",
                "description": "Query pull requests by project",
                "operationId": "PullRequestsGetPullRequestsByProject",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "searchCriteria",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "maxCommentLength",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pushes": {
            "post": {
                "summary": "",
                "description": "Push changes to the repository.",
                "operationId": "PushesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieves pushes associated with the specified repository.",
                "operationId": "PushesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "searchCriteria",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pushes\/{pushId}": {
            "get": {
                "summary": "",
                "description": "Retrieve a particular push.",
                "operationId": "PushesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pushId",
                        "in": "path",
                        "description": "The id of the push."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeCommits",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "includeRefUpdates",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/refs\/{*filter}": {
            "get": {
                "summary": "",
                "description": "Queries the provided repository for its refs and returns them.",
                "operationId": "RefsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "[optional] A filter to apply to the refs."
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "latestStatusesOnly",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/refs\/{filter}": {
            "patch": {
                "summary": "",
                "description": "",
                "operationId": "RefsUpdateRef",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "[optional] A filter to apply to the refs."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/refs": {
            "post": {
                "summary": "",
                "description": "Creates or updates refs with the given information",
                "operationId": "RefsUpdateRefs",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/favorites\/refs": {
            "post": {
                "summary": "",
                "description": "Creates a ref favorite",
                "operationId": "RefsFavoritesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Gets the refs favorites for a repo and an identity.",
                "operationId": "RefsFavoritesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "query",
                        "description": "The id of the repository."
                    },
                    {
                        "name": "identityId",
                        "in": "query",
                        "description": "The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/favorites\/refs\/{favoriteId}": {
            "delete": {
                "summary": "",
                "description": "",
                "operationId": "RefsFavoritesDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "favoriteId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "",
                "operationId": "RefsFavoritesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "favoriteId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories": {
            "post": {
                "summary": "",
                "description": "Create a git repository",
                "operationId": "RepositoriesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "sourceRef",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Retrieve git repositories.",
                "operationId": "RepositoriesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeLinks",
                        "in": "query",
                        "description": "True to include links"
                    },
                    {
                        "name": "includeAllUrls",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}": {
            "delete": {
                "summary": "",
                "description": "Delete a git repository",
                "operationId": "RepositoriesDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "",
                "operationId": "RepositoriesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "includeParent",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "",
                "description": "Updates the Git repository with the single populated change in the specified repository information.",
                "operationId": "RepositoriesUpdate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/reverts": {
            "post": {
                "summary": "",
                "description": "",
                "operationId": "RevertsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "",
                "operationId": "RevertsGetRevertForRefName",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "refName",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/reverts\/{revertId}": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "RevertsGetRevert",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "revertId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/commits\/{commitId}\/statuses": {
            "post": {
                "summary": "",
                "description": "",
                "operationId": "StatusesCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "commitId",
                        "in": "path",
                        "description": "The id of the commit."
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "",
                "operationId": "StatusesList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "commitId",
                        "in": "path",
                        "description": "The id of the commit."
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "latestOnly",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/suggestions": {
            "get": {
                "summary": "",
                "description": "Retrieve a set of suggestions (including a pull request suggestion).",
                "operationId": "SuggestionsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/trees\/{sha1}": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "TreesGetTree",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "sha1",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "recursive",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/iterations\/{iterationId}\/statuses\/{statusId}": {
            "delete": {
                "summary": "",
                "description": "Delete pull request iteration status.",
                "operationId": "PullRequestIterationStatusesDelete",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "ID of the pull request status."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.",
                "operationId": "PullRequestIterationStatusesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "iterationId",
                        "in": "path",
                        "description": "Iteration to retrieve commits for"
                    },
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "ID of the pull request status."
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/pullRequests\/{pullRequestId}\/labels": {
            "post": {
                "summary": "",
                "description": "Create a label for a specified pull request. The only required field is the name of the new label.",
                "operationId": "PullRequestLabelsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "",
                "description": "Get all the labels assigned to a pull request.",
                "operationId": "PullRequestLabelsList",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "pullRequestId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID or project name."
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/annotatedtags": {
            "post": {
                "summary": "",
                "description": "Create an annotated tag",
                "operationId": "AnnotatedTagsCreate",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/annotatedtags\/{objectId}": {
            "get": {
                "summary": "",
                "description": "Get an annotated tag",
                "operationId": "AnnotatedTagsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "objectId",
                        "in": "path",
                        "description": "Sha1 of annotated tag to be returned"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/blobs\/{sha1}": {
            "get": {
                "summary": "",
                "description": "Gets a single blob.",
                "operationId": "BlobsGetBlob",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "sha1",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "download",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/blobs": {
            "post": {
                "summary": "",
                "description": "Gets one or more blobs in a zip file download.",
                "operationId": "BlobsGetBlobsZip",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "fileName",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/stats\/branches": {
            "get": {
                "summary": "",
                "description": "Retrieve statistics about a single branch.",
                "operationId": "BranchStatsGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the branch"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "baseVersionDescriptor",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "",
                "description": "Retrieve statistics for multiple commits\n\nDo NOT make this public or document this publically until the following issues are fixed:\n            * This is in GitBranchStatsController mainly b\/c it returns GitBranchStats, but neither\n              the parameters nor result are branch specific.  GitCommitDiffsController might be a\n              reasonable alternative home, but that returns much more than the ahead\/behind counts\n              and it would be strange to return a GitBranchStats there.",
                "operationId": "BranchStatsGetBranchStatsBatch",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/commits\/{commitId}\/changes": {
            "get": {
                "summary": "",
                "description": "Retrieve changes for a particular commit.",
                "operationId": "ChangesGet",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "commitId",
                        "in": "path",
                        "description": "The id of the commit."
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "Maximum number of changes to return"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "Number of changes to skip"
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        },
        "\/{project}\/_apis\/git\/repositories\/{repositoryId}\/cherryPicks\/{cherryPickId}": {
            "get": {
                "summary": "",
                "description": "",
                "operationId": "CherryPicksGetCherryPick",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "project",
                        "in": "path",
                        "description": "Project ID or project name"
                    },
                    {
                        "name": "cherryPickId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "repositoryId",
                        "in": "path",
                        "description": ""
                    },
                    {
                        "name": "No Name",
                        "in": "query",
                        "description": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$href": "#\/components\/schemas\/GitCherryPick"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AssociatedWorkItem": {
                "type": "object",
                "properties": {
                    "assignedTo": {
                        "description": "",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "state": {
                        "description": "",
                        "type": "string"
                    },
                    "title": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "webUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "workItemType": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "AsyncGitOperationNotification": {
                "type": "object",
                "properties": {
                    "operationId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "AsyncRefOperationCommitLevelEventNotification": {
                "type": "object",
                "properties": {
                    "commitId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "AsyncRefOperationCompletedNotification": {
                "type": "object",
                "properties": {
                    "newRefName": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "AsyncRefOperationConflictNotification": {
                "type": "object"
            },
            "AsyncRefOperationGeneralFailureNotification": {
                "type": "object"
            },
            "AsyncRefOperationProgressNotification": {
                "type": "object",
                "properties": {
                    "progress": {
                        "description": "",
                        "type": "number"
                    }
                }
            },
            "AsyncRefOperationTimeoutNotification": {
                "type": "object"
            },
            "Attachment": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "author": {
                        "description": "The person that uploaded this attachment",
                        "type": ""
                    },
                    "contentHash": {
                        "description": "Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.",
                        "type": "string"
                    },
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "The display name of the attachment, can't be null or empty.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "properties": {
                        "description": "",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "PropertiesCollection": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "_links": {
                "type": "object"
            },
            "author": {
                "type": "object"
            },
            "properties": {
                "type": "object"
            },
            "Change": {
                "type": "object",
                "properties": {
                    "changeType": {
                        "description": "",
                        "type": ""
                    },
                    "item": {
                        "description": "",
                        "type": "string"
                    },
                    "newContent": {
                        "description": "",
                        "type": ""
                    },
                    "sourceServerItem": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ItemContent": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "newContent": {
                "type": "object"
            },
            "ChangeCountDictionary": {
                "type": "object"
            },
            "ChangeList": {
                "type": "object",
                "properties": {
                    "allChangesIncluded": {
                        "description": "",
                        "type": "boolean"
                    },
                    "changeCounts": {
                        "description": "",
                        "type": "object"
                    },
                    "changes": {
                        "description": "",
                        "type": "array"
                    },
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "commentTruncated": {
                        "description": "",
                        "type": "boolean"
                    },
                    "creationDate": {
                        "description": "",
                        "type": "string"
                    },
                    "notes": {
                        "description": "",
                        "type": "array"
                    },
                    "owner": {
                        "description": "",
                        "type": "string"
                    },
                    "ownerDisplayName": {
                        "description": "",
                        "type": "string"
                    },
                    "ownerId": {
                        "description": "",
                        "type": "string"
                    },
                    "sortDate": {
                        "description": "",
                        "type": "string"
                    },
                    "version": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "changeCounts": {
                "type": "object"
            },
            "changes": {
                "type": "array"
            },
            "notes": {
                "type": "array"
            },
            "ChangeListSearchCriteria": {
                "type": "object",
                "properties": {
                    "compareVersion": {
                        "description": "If provided, a version descriptor to compare against base",
                        "type": "string"
                    },
                    "excludeDeletes": {
                        "description": "If true, don't include delete history entries",
                        "type": "boolean"
                    },
                    "followRenames": {
                        "description": "Whether or not to follow renames for the given item being queried",
                        "type": "boolean"
                    },
                    "fromDate": {
                        "description": "If provided, only include history entries created after this date (string)",
                        "type": "string"
                    },
                    "fromVersion": {
                        "description": "If provided, a version descriptor for the earliest change list to include",
                        "type": "string"
                    },
                    "itemPath": {
                        "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
                        "type": "string"
                    },
                    "itemPaths": {
                        "description": "List of item paths to search under. If this member is used then itemPath will be ignored.",
                        "type": "array"
                    },
                    "itemVersion": {
                        "description": "Version of the items to search",
                        "type": "string"
                    },
                    "skip": {
                        "description": "Number of results to skip (used when clicking more...)",
                        "type": "integer"
                    },
                    "toDate": {
                        "description": "If provided, only include history entries created before this date (string)",
                        "type": "string"
                    },
                    "top": {
                        "description": "If provided, the maximum number of history entries to return",
                        "type": "integer"
                    },
                    "toVersion": {
                        "description": "If provided, a version descriptor for the latest change list to include",
                        "type": "string"
                    },
                    "user": {
                        "description": "Alias or display name of user who made the changes",
                        "type": "string"
                    }
                }
            },
            "itemPaths": {
                "type": "array"
            },
            "CheckinNote": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "value": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "Comment": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "author": {
                        "description": "The person that uploaded this attachment",
                        "type": ""
                    },
                    "commentType": {
                        "description": "Determines what kind of comment when it was created.",
                        "type": ""
                    },
                    "content": {
                        "description": "The comment's content.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "isDeleted": {
                        "description": "Marks if this comment was soft-deleted.",
                        "type": "boolean"
                    },
                    "lastContentUpdatedDate": {
                        "description": "The date a comment content was last updated.",
                        "type": "string"
                    },
                    "lastUpdatedDate": {
                        "description": "The date a comment was last updated.",
                        "type": "string"
                    },
                    "parentCommentId": {
                        "description": "The pull request comment id of the parent comment. This is used for replies",
                        "type": "integer"
                    },
                    "publishedDate": {
                        "description": "The date a comment was first published.",
                        "type": "string"
                    },
                    "usersLiked": {
                        "description": "A list of the users who've liked this comment.",
                        "type": "array"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "usersLiked": {
                "type": "array"
            },
            "CommentIterationContext": {
                "type": "object",
                "properties": {
                    "firstComparingIteration": {
                        "description": "First comparing iteration Id. Minimum value is 1.",
                        "type": "integer"
                    },
                    "secondComparingIteration": {
                        "description": "Second comparing iteration Id. Minimum value is 1.",
                        "type": "integer"
                    }
                }
            },
            "CommentPosition": {
                "type": "object",
                "properties": {
                    "line": {
                        "description": "Position line starting with one.",
                        "type": "integer"
                    },
                    "offset": {
                        "description": "Position offset starting with zero.",
                        "type": "integer"
                    }
                }
            },
            "CommentThread": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "comments": {
                        "description": "A list of the comments.",
                        "type": "array"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "isDeleted": {
                        "description": "Marks if this comment was soft-deleted.",
                        "type": "boolean"
                    },
                    "lastUpdatedDate": {
                        "description": "The date a comment was last updated.",
                        "type": "string"
                    },
                    "properties": {
                        "description": "",
                        "type": ""
                    },
                    "publishedDate": {
                        "description": "The date a comment was first published.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "threadContext": {
                        "description": "Specify thread context such as position in left\/right file.",
                        "type": ""
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "PropertiesCollection": {
                        "description": "",
                        "type": "object"
                    },
                    "CommentThreadContext": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "comments": {
                "type": "array"
            },
            "threadContext": {
                "type": "object"
            },
            "CommentThreadContext": {
                "type": "object",
                "properties": {
                    "filePath": {
                        "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
                        "type": "string"
                    },
                    "CommentPosition": {
                        "description": "",
                        "type": "object"
                    },
                    "leftFileEnd": {
                        "description": "Position of last character of the comment in left file.",
                        "type": ""
                    },
                    "leftFileStart": {
                        "description": "Position of first character of the comment in left file.",
                        "type": ""
                    },
                    "rightFileEnd": {
                        "description": "Position of last character of the comment in right file.",
                        "type": ""
                    },
                    "rightFileStart": {
                        "description": "Position of first character of the comment in right file.",
                        "type": ""
                    }
                }
            },
            "CommentTrackingCriteria": {
                "type": "object",
                "properties": {
                    "firstComparingIteration": {
                        "description": "First comparing iteration Id. Minimum value is 1.",
                        "type": "integer"
                    },
                    "origFilePath": {
                        "description": "Original filepath the comment was on before tracking",
                        "type": "string"
                    },
                    "CommentPosition": {
                        "description": "",
                        "type": "object"
                    },
                    "origLeftFileEnd": {
                        "description": "Original position of last character of the comment in left file.",
                        "type": ""
                    },
                    "origLeftFileStart": {
                        "description": "Original position of first character of the comment in left file.",
                        "type": ""
                    },
                    "origRightFileEnd": {
                        "description": "Original position of last character of the comment in right file.",
                        "type": ""
                    },
                    "origRightFileStart": {
                        "description": "Original position of first character of the comment in right file.",
                        "type": ""
                    },
                    "secondComparingIteration": {
                        "description": "Second comparing iteration Id. Minimum value is 1.",
                        "type": "integer"
                    }
                }
            },
            "FileContentMetadata": {
                "type": "object",
                "properties": {
                    "contentType": {
                        "description": "",
                        "type": "string"
                    },
                    "encoding": {
                        "description": "",
                        "type": "integer"
                    },
                    "extension": {
                        "description": "",
                        "type": "string"
                    },
                    "fileName": {
                        "description": "",
                        "type": "string"
                    },
                    "isBinary": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isImage": {
                        "description": "",
                        "type": "boolean"
                    },
                    "vsLink": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitAnnotatedTag": {
                "type": "object",
                "properties": {
                    "message": {
                        "description": "Tagging Message",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "taggedBy": {
                        "description": "User name, Email and date of tagging",
                        "type": ""
                    },
                    "taggedObject": {
                        "description": "Tagged git object",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "GitUserDate": {
                        "description": "",
                        "type": "object"
                    },
                    "GitObject": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "taggedBy": {
                "type": "object"
            },
            "taggedObject": {
                "type": "object"
            },
            "GitAsyncRefOperation": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "detailedStatus": {
                        "description": "",
                        "type": ""
                    },
                    "parameters": {
                        "description": "",
                        "type": ""
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitAsyncRefOperationDetail": {
                        "description": "",
                        "type": "object"
                    },
                    "GitAsyncRefOperationParameters": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "detailedStatus": {
                "type": "object"
            },
            "parameters": {
                "type": "object"
            },
            "GitAsyncRefOperationDetail": {
                "type": "object",
                "properties": {
                    "conflict": {
                        "description": "",
                        "type": "boolean"
                    },
                    "currentCommitId": {
                        "description": "",
                        "type": "string"
                    },
                    "failureMessage": {
                        "description": "",
                        "type": "string"
                    },
                    "progress": {
                        "description": "",
                        "type": "number"
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "timedout": {
                        "description": "",
                        "type": "boolean"
                    }
                }
            },
            "GitAsyncRefOperationParameters": {
                "type": "object",
                "properties": {
                    "generatedRefName": {
                        "description": "",
                        "type": "string"
                    },
                    "ontoRefName": {
                        "description": "",
                        "type": "string"
                    },
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "source": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    },
                    "GitAsyncRefOperationSource": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "repository": {
                "type": "object"
            },
            "source": {
                "type": "object"
            },
            "GitAsyncRefOperationSource": {
                "type": "object",
                "properties": {
                    "commitList": {
                        "description": "",
                        "type": "array"
                    },
                    "pullRequestId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "commitList": {
                "type": "array"
            },
            "GitBaseVersionDescriptor": {
                "type": "object",
                "properties": {
                    "baseVersion": {
                        "description": "Version string identifier (name of tag\/branch, SHA1 of commit)",
                        "type": "string"
                    },
                    "baseVersionOptions": {
                        "description": "Version options - Specify additional modifiers to version (e.g Previous)",
                        "type": ""
                    },
                    "baseVersionType": {
                        "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
                        "type": ""
                    }
                }
            },
            "GitBlobRef": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of blob content (in bytes)",
                        "type": "integer"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    }
                }
            },
            "GitBranchStats": {
                "type": "object",
                "properties": {
                    "aheadCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "behindCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "commit": {
                        "description": "",
                        "type": ""
                    },
                    "isBaseVersion": {
                        "description": "",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "GitCommitRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "commit": {
                "type": "object"
            },
            "GitChange": {
                "type": "object",
                "properties": {
                    "changeId": {
                        "description": "Id of the change within the group.  For example, within the iteration",
                        "type": "integer"
                    },
                    "newContentTemplate": {
                        "description": "New Content template to be used",
                        "type": ""
                    },
                    "originalPath": {
                        "description": "Original path of item if different from current path",
                        "type": "string"
                    },
                    "GitTemplate": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "newContentTemplate": {
                "type": "object"
            },
            "GitCherryPick": {
                "type": "object",
                "properties": {
                    "cherryPickId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "GitCommit": {
                "type": "object",
                "properties": {
                    "push": {
                        "description": "",
                        "type": ""
                    },
                    "treeId": {
                        "description": "",
                        "type": "string"
                    },
                    "GitPushRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "push": {
                "type": "object"
            },
            "GitCommitChanges": {
                "type": "object",
                "properties": {
                    "ChangeCountDictionary": {
                        "description": "",
                        "type": "object"
                    },
                    "changeCounts": {
                        "description": "",
                        "type": ""
                    },
                    "changes": {
                        "description": "",
                        "type": "array"
                    }
                }
            },
            "GitCommitDiffs": {
                "type": "object",
                "properties": {
                    "aheadCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "allChangesIncluded": {
                        "description": "",
                        "type": "boolean"
                    },
                    "baseCommit": {
                        "description": "",
                        "type": "string"
                    },
                    "behindCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "changeCounts": {
                        "description": "",
                        "type": "object"
                    },
                    "changes": {
                        "description": "",
                        "type": "array"
                    },
                    "commonCommit": {
                        "description": "",
                        "type": "string"
                    },
                    "targetCommit": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitCommitRef": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "author": {
                        "description": "The person that uploaded this attachment",
                        "type": ""
                    },
                    "ChangeCountDictionary": {
                        "description": "",
                        "type": "object"
                    },
                    "changeCounts": {
                        "description": "",
                        "type": ""
                    },
                    "changes": {
                        "description": "",
                        "type": "array"
                    },
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "commentTruncated": {
                        "description": "",
                        "type": "boolean"
                    },
                    "commitId": {
                        "description": "",
                        "type": "string"
                    },
                    "committer": {
                        "description": "",
                        "type": ""
                    },
                    "parents": {
                        "description": "",
                        "type": "array"
                    },
                    "remoteUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "statuses": {
                        "description": "",
                        "type": "array"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "workItems": {
                        "description": "",
                        "type": "array"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitUserDate": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "committer": {
                "type": "object"
            },
            "parents": {
                "type": "array"
            },
            "statuses": {
                "type": "array"
            },
            "workItems": {
                "type": "array"
            },
            "GitCommitToCreate": {
                "type": "object",
                "properties": {
                    "baseRef": {
                        "description": "",
                        "type": ""
                    },
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "pathActions": {
                        "description": "",
                        "type": "array"
                    },
                    "GitRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "baseRef": {
                "type": "object"
            },
            "pathActions": {
                "type": "array"
            },
            "GitConflict": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "conflictId": {
                        "description": "",
                        "type": "integer"
                    },
                    "conflictPath": {
                        "description": "",
                        "type": "string"
                    },
                    "conflictType": {
                        "description": "",
                        "type": ""
                    },
                    "GitCommitRef": {
                        "description": "",
                        "type": "object"
                    },
                    "mergeBaseCommit": {
                        "description": "",
                        "type": ""
                    },
                    "mergeOrigin": {
                        "description": "",
                        "type": ""
                    },
                    "mergeSourceCommit": {
                        "description": "",
                        "type": ""
                    },
                    "mergeTargetCommit": {
                        "description": "",
                        "type": ""
                    },
                    "resolutionError": {
                        "description": "",
                        "type": ""
                    },
                    "resolutionStatus": {
                        "description": "",
                        "type": ""
                    },
                    "resolvedBy": {
                        "description": "",
                        "type": ""
                    },
                    "resolvedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitMergeOriginRef": {
                        "description": "",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "mergeOrigin": {
                "type": "object"
            },
            "resolvedBy": {
                "type": "object"
            },
            "GitConflictAddAdd": {
                "type": "object",
                "properties": {
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionMergeContent": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "resolution": {
                "type": "object"
            },
            "GitConflictAddRename": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetOriginalPath": {
                        "description": "",
                        "type": "string"
                    },
                    "GitResolutionPathConflict": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictDeleteEdit": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionPickOneAction": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictDeleteRename": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetNewPath": {
                        "description": "",
                        "type": "string"
                    },
                    "GitResolutionPickOneAction": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictDirectoryFile": {
                "type": "object",
                "properties": {
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceTree": {
                        "description": "",
                        "type": ""
                    },
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionPathConflict": {
                        "description": "",
                        "type": "object"
                    },
                    "GitTreeRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "sourceTree": {
                "type": "object"
            },
            "GitConflictEditDelete": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionPickOneAction": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictEditEdit": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionMergeContent": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictFileDirectory": {
                "type": "object",
                "properties": {
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetTree": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionPathConflict": {
                        "description": "",
                        "type": "object"
                    },
                    "GitTreeRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "targetTree": {
                "type": "object"
            },
            "GitConflictRename1to2": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "sourceNewPath": {
                        "description": "",
                        "type": "string"
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetNewPath": {
                        "description": "",
                        "type": "string"
                    },
                    "GitResolutionRename1to2": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictRename2to1": {
                "type": "object",
                "properties": {
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "sourceNewBlob": {
                        "description": "",
                        "type": ""
                    },
                    "sourceOriginalBlob": {
                        "description": "",
                        "type": ""
                    },
                    "sourceOriginalPath": {
                        "description": "",
                        "type": "string"
                    },
                    "targetNewBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetOriginalBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetOriginalPath": {
                        "description": "",
                        "type": "string"
                    },
                    "GitResolutionPathConflict": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictRenameAdd": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "sourceOriginalPath": {
                        "description": "",
                        "type": "string"
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionPathConflict": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictRenameDelete": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "sourceNewPath": {
                        "description": "",
                        "type": "string"
                    },
                    "GitResolutionPickOneAction": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictRenameRename": {
                "type": "object",
                "properties": {
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "baseBlob": {
                        "description": "",
                        "type": ""
                    },
                    "originalPath": {
                        "description": "Original path of item if different from current path",
                        "type": "string"
                    },
                    "resolution": {
                        "description": "",
                        "type": ""
                    },
                    "sourceBlob": {
                        "description": "",
                        "type": ""
                    },
                    "targetBlob": {
                        "description": "",
                        "type": ""
                    },
                    "GitResolutionMergeContent": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitConflictUpdateResult": {
                "type": "object",
                "properties": {
                    "conflictId": {
                        "description": "",
                        "type": "integer"
                    },
                    "customMessage": {
                        "description": "Reason for failing",
                        "type": "string"
                    },
                    "GitConflict": {
                        "description": "",
                        "type": "object"
                    },
                    "updatedConflict": {
                        "description": "New state of the conflict after updating",
                        "type": ""
                    },
                    "updateStatus": {
                        "description": "Status of the update on the server",
                        "type": ""
                    }
                }
            },
            "GitDeletedRepository": {
                "type": "object",
                "properties": {
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "deletedBy": {
                        "description": "",
                        "type": ""
                    },
                    "deletedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    }
                }
            },
            "deletedBy": {
                "type": "object"
            },
            "project": {
                "type": "object"
            },
            "GitFilePathsCollection": {
                "type": "object",
                "properties": {
                    "commitId": {
                        "description": "",
                        "type": "string"
                    },
                    "paths": {
                        "description": "",
                        "type": "array"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "paths": {
                "type": "array"
            },
            "GitForkOperationStatusDetail": {
                "type": "object",
                "properties": {
                    "allSteps": {
                        "description": "All valid steps for the forking process",
                        "type": "array"
                    },
                    "currentStep": {
                        "description": "Index into AllSteps for the current step",
                        "type": "integer"
                    },
                    "errorMessage": {
                        "description": "Error message if the operation failed.",
                        "type": "string"
                    }
                }
            },
            "allSteps": {
                "type": "array"
            },
            "GitForkRef": {
                "type": "object",
                "properties": {
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitForkRelationship": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "collection": {
                        "description": "Team Project Collection where this Fork resides",
                        "type": ""
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "relationship": {
                        "description": "Relationship of this fork to the current repository context",
                        "type": ""
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "TeamProjectCollectionReference": {
                        "description": "Reference object for a TeamProjectCollection.",
                        "type": "object"
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    }
                }
            },
            "collection": {
                "type": "object"
            },
            "GitForkSyncRequest": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "GitForkOperationStatusDetail": {
                        "description": "Status information about a requested fork operation.",
                        "type": "object"
                    },
                    "detailedStatus": {
                        "description": "",
                        "type": ""
                    },
                    "operationId": {
                        "description": "",
                        "type": "integer"
                    },
                    "source": {
                        "description": "",
                        "type": ""
                    },
                    "sourceToTargetRefs": {
                        "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
                        "type": "array"
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GlobalGitRepositoryKey": {
                        "description": "Globally unique key for a repository.",
                        "type": "object"
                    }
                }
            },
            "sourceToTargetRefs": {
                "type": "array"
            },
            "GitForkSyncRequestParameters": {
                "type": "object",
                "properties": {
                    "source": {
                        "description": "",
                        "type": ""
                    },
                    "sourceToTargetRefs": {
                        "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
                        "type": "array"
                    },
                    "GlobalGitRepositoryKey": {
                        "description": "Globally unique key for a repository.",
                        "type": "object"
                    }
                }
            },
            "GitImportFailedEvent": {
                "type": "object",
                "properties": {
                    "sourceRepositoryName": {
                        "description": "",
                        "type": "string"
                    },
                    "targetRepository": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "targetRepository": {
                "type": "object"
            },
            "GitImportGitSource": {
                "type": "object",
                "properties": {
                    "overwrite": {
                        "description": "Tells if this is a sync request or not",
                        "type": "boolean"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "GitImportRequest": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "detailedStatus": {
                        "description": "",
                        "type": ""
                    },
                    "importRequestId": {
                        "description": "",
                        "type": "integer"
                    },
                    "parameters": {
                        "description": "",
                        "type": ""
                    },
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitImportStatusDetail": {
                        "description": "",
                        "type": "object"
                    },
                    "GitImportRequestParameters": {
                        "description": "Parameters for creating an import request",
                        "type": "object"
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitImportRequestParameters": {
                "type": "object",
                "properties": {
                    "deleteServiceEndpointAfterImportIsDone": {
                        "description": "Option to delete service endpoint when import is done",
                        "type": "boolean"
                    },
                    "GitImportGitSource": {
                        "description": "Parameter for creating a git import request when source is Git version control",
                        "type": "object"
                    },
                    "gitSource": {
                        "description": "Source for importing git repository",
                        "type": ""
                    },
                    "serviceEndpointId": {
                        "description": "Service Endpoint for connection to external endpoint",
                        "type": "string"
                    },
                    "tfvcSource": {
                        "description": "Source for importing tfvc repository",
                        "type": ""
                    },
                    "GitImportTfvcSource": {
                        "description": "Parameter for creating a git import request when source is tfvc version control",
                        "type": "object"
                    }
                }
            },
            "tfvcSource": {
                "type": "object"
            },
            "GitImportStatusDetail": {
                "type": "object",
                "properties": {
                    "allSteps": {
                        "description": "All valid steps for the forking process",
                        "type": "array"
                    },
                    "currentStep": {
                        "description": "Index into AllSteps for the current step",
                        "type": "integer"
                    },
                    "errorMessage": {
                        "description": "Error message if the operation failed.",
                        "type": "string"
                    }
                }
            },
            "GitImportSucceededEvent": {
                "type": "object",
                "properties": {
                    "sourceRepositoryName": {
                        "description": "",
                        "type": "string"
                    },
                    "targetRepository": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitImportTfvcSource": {
                "type": "object",
                "properties": {
                    "importHistory": {
                        "description": "Set true to import History, false otherwise",
                        "type": "boolean"
                    },
                    "importHistoryDurationInDays": {
                        "description": "Get history for last n days (max allowed value is 180 days)",
                        "type": "integer"
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    }
                }
            },
            "GitItem": {
                "type": "object",
                "properties": {
                    "commitId": {
                        "description": "",
                        "type": "string"
                    },
                    "gitObjectType": {
                        "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
                        "type": ""
                    },
                    "GitCommitRef": {
                        "description": "",
                        "type": "object"
                    },
                    "latestProcessedChange": {
                        "description": "Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached",
                        "type": ""
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "originalObjectId": {
                        "description": "Git object id",
                        "type": "string"
                    }
                }
            },
            "GitItemDescriptor": {
                "type": "object",
                "properties": {
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "recursionLevel": {
                        "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
                        "type": ""
                    },
                    "version": {
                        "description": "",
                        "type": "string"
                    },
                    "versionOptions": {
                        "description": "Version modifiers (e.g. previous)",
                        "type": ""
                    },
                    "versionType": {
                        "description": "How to interpret version (branch,tag,commit)",
                        "type": ""
                    }
                }
            },
            "GitItemRequestData": {
                "type": "object",
                "properties": {
                    "includeContentMetadata": {
                        "description": "Whether to include metadata for all items",
                        "type": "boolean"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "itemDescriptors": {
                        "description": "Collection of items to fetch, including path, version, and recursion level",
                        "type": "array"
                    },
                    "latestProcessedChange": {
                        "description": "Whether to include shallow ref to commit that last changed each item",
                        "type": "boolean"
                    }
                }
            },
            "itemDescriptors": {
                "type": "array"
            },
            "GitLastChangeItem": {
                "type": "object",
                "properties": {
                    "commitId": {
                        "description": "",
                        "type": "string"
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    }
                }
            },
            "GitLastChangeTreeItems": {
                "type": "object",
                "properties": {
                    "commits": {
                        "description": "The list of commits referenced by Items, if they were requested.",
                        "type": "array"
                    },
                    "items": {
                        "description": "The last change of items.",
                        "type": "array"
                    },
                    "lastExploredTime": {
                        "description": "The last explored time, in case the result is not comprehensive. Null otherwise.",
                        "type": "string"
                    }
                }
            },
            "commits": {
                "type": "array"
            },
            "items": {
                "type": "object"
            },
            "GitMergeOriginRef": {
                "type": "object",
                "properties": {
                    "pullRequestId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "GitObject": {
                "type": "object",
                "properties": {
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "objectType": {
                        "description": "Type of object (Commit, Tree, Blob, Tag)",
                        "type": ""
                    }
                }
            },
            "GitPathAction": {
                "type": "object",
                "properties": {
                    "action": {
                        "description": "",
                        "type": ""
                    },
                    "base64Content": {
                        "description": "",
                        "type": "string"
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "rawTextContent": {
                        "description": "",
                        "type": "string"
                    },
                    "targetPath": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitPathToItemsCollection": {
                "type": "object",
                "properties": {
                    "items": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitPullRequest": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "artifactId": {
                        "description": "",
                        "type": "string"
                    },
                    "autoCompleteSetBy": {
                        "description": "",
                        "type": ""
                    },
                    "closedBy": {
                        "description": "",
                        "type": ""
                    },
                    "closedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "codeReviewId": {
                        "description": "",
                        "type": "integer"
                    },
                    "commits": {
                        "description": "The list of commits referenced by Items, if they were requested.",
                        "type": "array"
                    },
                    "completionOptions": {
                        "description": "",
                        "type": ""
                    },
                    "completionQueueTime": {
                        "description": "",
                        "type": "string"
                    },
                    "createdBy": {
                        "description": "",
                        "type": ""
                    },
                    "creationDate": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "GitForkRef": {
                        "description": "",
                        "type": "object"
                    },
                    "forkSource": {
                        "description": "",
                        "type": ""
                    },
                    "labels": {
                        "description": "",
                        "type": "array"
                    },
                    "GitCommitRef": {
                        "description": "",
                        "type": "object"
                    },
                    "lastMergeCommit": {
                        "description": "",
                        "type": ""
                    },
                    "lastMergeSourceCommit": {
                        "description": "",
                        "type": ""
                    },
                    "lastMergeTargetCommit": {
                        "description": "",
                        "type": ""
                    },
                    "mergeFailureMessage": {
                        "description": "",
                        "type": "string"
                    },
                    "mergeFailureType": {
                        "description": "",
                        "type": ""
                    },
                    "mergeId": {
                        "description": "",
                        "type": "string"
                    },
                    "mergeOptions": {
                        "description": "",
                        "type": ""
                    },
                    "mergeStatus": {
                        "description": "",
                        "type": ""
                    },
                    "pullRequestId": {
                        "description": "",
                        "type": "integer"
                    },
                    "remoteUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "reviewers": {
                        "description": "",
                        "type": "array"
                    },
                    "sourceRefName": {
                        "description": "",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "supportsIterations": {
                        "description": "",
                        "type": "boolean"
                    },
                    "targetRefName": {
                        "description": "",
                        "type": "string"
                    },
                    "title": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "workItemRefs": {
                        "description": "",
                        "type": "array"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "GitPullRequestCompletionOptions": {
                        "description": "",
                        "type": "object"
                    },
                    "GitPullRequestMergeOptions": {
                        "description": "",
                        "type": "object"
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "autoCompleteSetBy": {
                "type": "object"
            },
            "closedBy": {
                "type": "object"
            },
            "completionOptions": {
                "type": "object"
            },
            "createdBy": {
                "type": "object"
            },
            "labels": {
                "type": "array"
            },
            "mergeOptions": {
                "type": "object"
            },
            "reviewers": {
                "type": "array"
            },
            "workItemRefs": {
                "type": "array"
            },
            "GitPullRequestChange": {
                "type": "object",
                "properties": {
                    "changeTrackingId": {
                        "description": "Id used to track files through multiple changes",
                        "type": "integer"
                    }
                }
            },
            "GitPullRequestCommentThread": {
                "type": "object",
                "properties": {
                    "pullRequestThreadContext": {
                        "description": "Extended context information unique to pull requests",
                        "type": ""
                    },
                    "GitPullRequestCommentThreadContext": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "pullRequestThreadContext": {
                "type": "object"
            },
            "GitPullRequestCommentThreadContext": {
                "type": "object",
                "properties": {
                    "changeTrackingId": {
                        "description": "Id used to track files through multiple changes",
                        "type": "integer"
                    },
                    "CommentIterationContext": {
                        "description": "Iteration context is used to specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
                        "type": "object"
                    },
                    "iterationContext": {
                        "description": "Specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
                        "type": ""
                    },
                    "CommentTrackingCriteria": {
                        "description": "Criteria to decide if and how a thread should be tracked",
                        "type": "object"
                    },
                    "trackingCriteria": {
                        "description": "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.",
                        "type": ""
                    }
                }
            },
            "GitPullRequestCompletionOptions": {
                "type": "object",
                "properties": {
                    "bypassPolicy": {
                        "description": "",
                        "type": "boolean"
                    },
                    "bypassReason": {
                        "description": "",
                        "type": "string"
                    },
                    "deleteSourceBranch": {
                        "description": "",
                        "type": "boolean"
                    },
                    "mergeCommitMessage": {
                        "description": "",
                        "type": "string"
                    },
                    "squashMerge": {
                        "description": "",
                        "type": "boolean"
                    },
                    "transitionWorkItems": {
                        "description": "",
                        "type": "boolean"
                    }
                }
            },
            "GitPullRequestIteration": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "author": {
                        "description": "The person that uploaded this attachment",
                        "type": ""
                    },
                    "changeList": {
                        "description": "",
                        "type": "array"
                    },
                    "commits": {
                        "description": "The list of commits referenced by Items, if they were requested.",
                        "type": "array"
                    },
                    "GitCommitRef": {
                        "description": "",
                        "type": "object"
                    },
                    "commonRefCommit": {
                        "description": "",
                        "type": ""
                    },
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "hasMoreCommits": {
                        "description": "",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "push": {
                        "description": "",
                        "type": ""
                    },
                    "reason": {
                        "description": "",
                        "type": ""
                    },
                    "sourceRefCommit": {
                        "description": "",
                        "type": ""
                    },
                    "targetRefCommit": {
                        "description": "",
                        "type": ""
                    },
                    "updatedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "GitPushRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "changeList": {
                "type": "array"
            },
            "GitPullRequestIterationChanges": {
                "type": "object",
                "properties": {
                    "changeEntries": {
                        "description": "",
                        "type": "array"
                    },
                    "nextSkip": {
                        "description": "",
                        "type": "integer"
                    },
                    "nextTop": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "changeEntries": {
                "type": "array"
            },
            "GitPullRequestMergeOptions": {
                "type": "object",
                "properties": {
                    "disableRenames": {
                        "description": "",
                        "type": "boolean"
                    }
                }
            },
            "GitPullRequestQuery": {
                "type": "object",
                "properties": {
                    "queries": {
                        "description": "The query to perform",
                        "type": "array"
                    },
                    "results": {
                        "description": "The results of the query",
                        "type": "array"
                    }
                }
            },
            "queries": {
                "type": "array"
            },
            "results": {
                "type": "array"
            },
            "GitPullRequestQueryInput": {
                "type": "object",
                "properties": {
                    "items": {
                        "description": "The last change of items.",
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of query to perform",
                        "type": ""
                    }
                }
            },
            "GitPullRequestReviewFileContentInfo": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "sHA1Hash": {
                        "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    }
                }
            },
            "GitPullRequestSearchCriteria": {
                "type": "object",
                "properties": {
                    "creatorId": {
                        "description": "",
                        "type": "string"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    },
                    "reviewerId": {
                        "description": "",
                        "type": "string"
                    },
                    "sourceRefName": {
                        "description": "",
                        "type": "string"
                    },
                    "sourceRepositoryId": {
                        "description": "",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the comment thread.",
                        "type": ""
                    },
                    "targetRefName": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitPullRequestStatus": {
                "type": "object",
                "properties": {
                    "iterationId": {
                        "description": "ID of the iteration to associate status with. Minimum value is 1.",
                        "type": "integer"
                    },
                    "properties": {
                        "description": "",
                        "type": ""
                    },
                    "PropertiesCollection": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitPush": {
                "type": "object",
                "properties": {
                    "commits": {
                        "description": "The list of commits referenced by Items, if they were requested.",
                        "type": "array"
                    },
                    "refUpdates": {
                        "description": "",
                        "type": "array"
                    },
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "refUpdates": {
                "type": "array"
            },
            "GitPushEventData": {
                "type": "object",
                "properties": {
                    "afterId": {
                        "description": "",
                        "type": "string"
                    },
                    "beforeId": {
                        "description": "",
                        "type": "string"
                    },
                    "branch": {
                        "description": "",
                        "type": "string"
                    },
                    "commits": {
                        "description": "The list of commits referenced by Items, if they were requested.",
                        "type": "array"
                    },
                    "repository": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepository": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "GitPushRef": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "date": {
                        "description": "",
                        "type": "string"
                    },
                    "pushCorrelationId": {
                        "description": "",
                        "type": "string"
                    },
                    "pushedBy": {
                        "description": "",
                        "type": ""
                    },
                    "pushId": {
                        "description": "",
                        "type": "integer"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "pushedBy": {
                "type": "object"
            },
            "GitPushSearchCriteria": {
                "type": "object",
                "properties": {
                    "fromDate": {
                        "description": "If provided, only include history entries created after this date (string)",
                        "type": "string"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "includeRefUpdates": {
                        "description": "",
                        "type": "boolean"
                    },
                    "pusherId": {
                        "description": "",
                        "type": "string"
                    },
                    "refName": {
                        "description": "",
                        "type": "string"
                    },
                    "toDate": {
                        "description": "If provided, only include history entries created before this date (string)",
                        "type": "string"
                    }
                }
            },
            "GitQueryBranchStatsCriteria": {
                "type": "object",
                "properties": {
                    "baseCommit": {
                        "description": "",
                        "type": ""
                    },
                    "targetCommits": {
                        "description": "",
                        "type": "array"
                    },
                    "GitVersionDescriptor": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "baseCommit": {
                "type": "object"
            },
            "targetCommits": {
                "type": "array"
            },
            "GitQueryCommitsCriteria": {
                "type": "object",
                "properties": {
                    "$skip": {
                        "description": "Number of entries to skip",
                        "type": "integer"
                    },
                    "$top": {
                        "description": "Maximum number of entries to retrieve",
                        "type": "integer"
                    },
                    "author": {
                        "description": "Alias or display name of the author",
                        "type": "string"
                    },
                    "compareVersion": {
                        "description": "If provided, the earliest commit in the graph to search",
                        "type": ""
                    },
                    "excludeDeletes": {
                        "description": "If true, don't include delete history entries",
                        "type": "boolean"
                    },
                    "fromCommitId": {
                        "description": "If provided, a lower bound for filtering commits alphabetically",
                        "type": "string"
                    },
                    "fromDate": {
                        "description": "If provided, only include history entries created after this date (string)",
                        "type": "string"
                    },
                    "historyMode": {
                        "description": "What Git history mode should be used. This only applies to the search criteria when Ids = null.",
                        "type": ""
                    },
                    "ids": {
                        "description": "If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.",
                        "type": "array"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "includeWorkItems": {
                        "description": "Whether to include linked work items",
                        "type": "boolean"
                    },
                    "itemPath": {
                        "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
                        "type": "string"
                    },
                    "itemVersion": {
                        "description": "If provided, identifies the commit or branch to search",
                        "type": ""
                    },
                    "toCommitId": {
                        "description": "If provided, an upper bound for filtering commits alphabetically",
                        "type": "string"
                    },
                    "toDate": {
                        "description": "If provided, only include history entries created before this date (string)",
                        "type": "string"
                    },
                    "user": {
                        "description": "Alias or display name of user who made the changes",
                        "type": "string"
                    },
                    "GitVersionDescriptor": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "compareVersion": {
                "type": "object"
            },
            "ids": {
                "type": "array"
            },
            "itemVersion": {
                "type": "object"
            },
            "GitQueryRefsCriteria": {
                "type": "object",
                "properties": {
                    "commitIds": {
                        "description": "List of commit Ids to be searched",
                        "type": "array"
                    },
                    "refNames": {
                        "description": "List of complete or partial names for refs to be searched",
                        "type": "array"
                    },
                    "searchType": {
                        "description": "Type of search on refNames, if provided",
                        "type": ""
                    }
                }
            },
            "commitIds": {
                "type": "array"
            },
            "refNames": {
                "type": "array"
            },
            "GitRef": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "isLocked": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isLockedBy": {
                        "description": "",
                        "type": ""
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "peeledObjectId": {
                        "description": "",
                        "type": "string"
                    },
                    "statuses": {
                        "description": "",
                        "type": "array"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "isLockedBy": {
                "type": "object"
            },
            "GitRefFavorite": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "identityId": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of query to perform",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    }
                }
            },
            "GitRefUpdate": {
                "type": "object",
                "properties": {
                    "isLocked": {
                        "description": "",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "newObjectId": {
                        "description": "",
                        "type": "string"
                    },
                    "oldObjectId": {
                        "description": "",
                        "type": "string"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitRefUpdateResult": {
                "type": "object",
                "properties": {
                    "customMessage": {
                        "description": "Reason for failing",
                        "type": "string"
                    },
                    "isLocked": {
                        "description": "",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "newObjectId": {
                        "description": "",
                        "type": "string"
                    },
                    "oldObjectId": {
                        "description": "",
                        "type": "string"
                    },
                    "rejectedBy": {
                        "description": "Name of the plugin that rejected the updated.",
                        "type": "string"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    },
                    "success": {
                        "description": "True if the ref update succeeded, false otherwise",
                        "type": "boolean"
                    },
                    "updateStatus": {
                        "description": "Status of the update on the server",
                        "type": ""
                    }
                }
            },
            "GitRepository": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "defaultBranch": {
                        "description": "",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "isFork": {
                        "description": "True if the repository was created as a fork",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "parentRepository": {
                        "description": "",
                        "type": ""
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "remoteUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "sshUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "validRemoteUrls": {
                        "description": "",
                        "type": "array"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitRepositoryRef": {
                        "description": "",
                        "type": "object"
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    }
                }
            },
            "parentRepository": {
                "type": "object"
            },
            "validRemoteUrls": {
                "type": "array"
            },
            "GitRepositoryCreateOptions": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "parentRepository": {
                        "description": "",
                        "type": ""
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "GitRepositoryRef": {
                        "description": "",
                        "type": "object"
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    }
                }
            },
            "GitRepositoryRef": {
                "type": "object",
                "properties": {
                    "collection": {
                        "description": "Team Project Collection where this Fork resides",
                        "type": ""
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "remoteUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "sshUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "TeamProjectCollectionReference": {
                        "description": "Reference object for a TeamProjectCollection.",
                        "type": "object"
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    }
                }
            },
            "GitRepositoryStats": {
                "type": "object",
                "properties": {
                    "activePullRequestsCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "branchesCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "commitsCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitResolution": {
                "type": "object"
            },
            "GitResolutionMergeContent": {
                "type": "object",
                "properties": {
                    "mergeType": {
                        "description": "",
                        "type": ""
                    },
                    "GitBlobRef": {
                        "description": "",
                        "type": "object"
                    },
                    "userMergedBlob": {
                        "description": "",
                        "type": ""
                    },
                    "userMergedContent": {
                        "description": "",
                        "type": "array"
                    }
                }
            },
            "userMergedContent": {
                "type": "array"
            },
            "GitResolutionPathConflict": {
                "type": "object",
                "properties": {
                    "action": {
                        "description": "",
                        "type": ""
                    },
                    "renamePath": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitResolutionPickOneAction": {
                "type": "object",
                "properties": {
                    "action": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "GitResolutionRename1to2": {
                "type": "object",
                "properties": {
                    "action": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "GitRevert": {
                "type": "object",
                "properties": {
                    "revertId": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "GitStatus": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "context": {
                        "description": "Context of the status.",
                        "type": ""
                    },
                    "createdBy": {
                        "description": "",
                        "type": ""
                    },
                    "creationDate": {
                        "description": "",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "state": {
                        "description": "State of the status.",
                        "type": ""
                    },
                    "targetUrl": {
                        "description": "URL with status details.",
                        "type": "string"
                    },
                    "updatedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "GitStatusContext": {
                        "description": "Status context that uniquely identifies the status.",
                        "type": "object"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "context": {
                "type": "object"
            },
            "GitStatusContext": {
                "type": "object",
                "properties": {
                    "genre": {
                        "description": "Genre of the status. Typically name of the service\/tool generating the status, can be empty.",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitSuggestion": {
                "type": "object",
                "properties": {
                    "properties": {
                        "description": "Reference",
                        "type": "object"
                    },
                    "type": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitTargetVersionDescriptor": {
                "type": "object",
                "properties": {
                    "targetVersion": {
                        "description": "Version string identifier (name of tag\/branch, SHA1 of commit)",
                        "type": "string"
                    },
                    "targetVersionOptions": {
                        "description": "Version options - Specify additional modifiers to version (e.g Previous)",
                        "type": ""
                    },
                    "targetVersionType": {
                        "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
                        "type": ""
                    }
                }
            },
            "GitTemplate": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "type": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitTreeDiff": {
                "type": "object",
                "properties": {
                    "baseTreeId": {
                        "description": "ObjectId of the base tree of this diff.",
                        "type": "string"
                    },
                    "diffEntries": {
                        "description": "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yeild more diff entries. If the continuation token is not returned all the diff entries have been included in this response.",
                        "type": "array"
                    },
                    "targetTreeId": {
                        "description": "ObjectId of the target tree of this diff.",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "diffEntries": {
                "type": "array"
            },
            "GitTreeDiffEntry": {
                "type": "object",
                "properties": {
                    "baseObjectId": {
                        "description": "SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.",
                        "type": "string"
                    },
                    "changeType": {
                        "description": "",
                        "type": ""
                    },
                    "objectType": {
                        "description": "Type of object (Commit, Tree, Blob, Tag)",
                        "type": ""
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "targetObjectId": {
                        "description": "SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.",
                        "type": "string"
                    }
                }
            },
            "GitTreeDiffResponse": {
                "type": "object",
                "properties": {
                    "continuationToken": {
                        "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
                        "type": "array"
                    },
                    "GitTreeDiff": {
                        "description": "",
                        "type": "object"
                    },
                    "treeDiff": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "continuationToken": {
                "type": "array"
            },
            "GitTreeEntryRef": {
                "type": "object",
                "properties": {
                    "gitObjectType": {
                        "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
                        "type": ""
                    },
                    "mode": {
                        "description": "Mode represented as octal string",
                        "type": "string"
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "relativePath": {
                        "description": "Path relative to parent tree object",
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of blob content (in bytes)",
                        "type": "integer"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "GitTreeRef": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "objectId": {
                        "description": "",
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of blob content (in bytes)",
                        "type": "integer"
                    },
                    "treeEntries": {
                        "description": "Blobs and trees under this tree",
                        "type": "array"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    }
                }
            },
            "treeEntries": {
                "type": "array"
            },
            "GitUserDate": {
                "type": "object",
                "properties": {
                    "date": {
                        "description": "",
                        "type": "string"
                    },
                    "email": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "GitVersionDescriptor": {
                "type": "object",
                "properties": {
                    "version": {
                        "description": "",
                        "type": "string"
                    },
                    "versionOptions": {
                        "description": "Version modifiers (e.g. previous)",
                        "type": ""
                    },
                    "versionType": {
                        "description": "How to interpret version (branch,tag,commit)",
                        "type": ""
                    }
                }
            },
            "GlobalGitRepositoryKey": {
                "type": "object",
                "properties": {
                    "collectionId": {
                        "description": "",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "",
                        "type": "string"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "HistoryEntry": {
                "type": "object",
                "properties": {
                    "changeList": {
                        "description": "The Change list (changeset\/commit\/shelveset) for this point in history",
                        "type": "string"
                    },
                    "itemChangeType": {
                        "description": "The change made to the item from this change list (only relevant for File history, not folders)",
                        "type": ""
                    },
                    "serverItem": {
                        "description": "The path of the item at this point in history (only relevant for File history, not folders)",
                        "type": "string"
                    }
                }
            },
            "IdentityRef": {
                "type": "object",
                "properties": {
                    "directoryAlias": {
                        "description": "",
                        "type": "string"
                    },
                    "displayName": {
                        "description": "The display name of the attachment, can't be null or empty.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "imageUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "inactive": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isAadIdentity": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isContainer": {
                        "description": "",
                        "type": "boolean"
                    },
                    "profileUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "uniqueName": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "IdentityRefWithVote": {
                "type": "object",
                "properties": {
                    "isRequired": {
                        "description": "",
                        "type": "boolean"
                    },
                    "reviewerUrl": {
                        "description": "",
                        "type": "string"
                    },
                    "vote": {
                        "description": "",
                        "type": "integer"
                    },
                    "votedFor": {
                        "description": "",
                        "type": "array"
                    }
                }
            },
            "votedFor": {
                "type": "array"
            },
            "ImportRepositoryValidation": {
                "type": "object",
                "properties": {
                    "GitImportGitSource": {
                        "description": "Parameter for creating a git import request when source is Git version control",
                        "type": "object"
                    },
                    "gitSource": {
                        "description": "Source for importing git repository",
                        "type": ""
                    },
                    "password": {
                        "description": "",
                        "type": "string"
                    },
                    "GitImportTfvcSource": {
                        "description": "Parameter for creating a git import request when source is tfvc version control",
                        "type": "object"
                    },
                    "tfvcSource": {
                        "description": "Source for importing tfvc repository",
                        "type": ""
                    },
                    "username": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "IncludedGitCommit": {
                "type": "object",
                "properties": {
                    "commitId": {
                        "description": "",
                        "type": "string"
                    },
                    "commitTime": {
                        "description": "",
                        "type": "string"
                    },
                    "parentCommitIds": {
                        "description": "",
                        "type": "array"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "parentCommitIds": {
                "type": "array"
            },
            "ItemContent": {
                "type": "object",
                "properties": {
                    "content": {
                        "description": "The comment's content.",
                        "type": "string"
                    },
                    "contentType": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "ItemDetailsOptions": {
                "type": "object",
                "properties": {
                    "includeContentMetadata": {
                        "description": "Whether to include metadata for all items",
                        "type": "boolean"
                    },
                    "recursionLevel": {
                        "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
                        "type": ""
                    }
                }
            },
            "ItemModel": {
                "type": "object",
                "properties": {
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "FileContentMetadata": {
                        "description": "",
                        "type": "object"
                    },
                    "contentMetadata": {
                        "description": "",
                        "type": ""
                    },
                    "isFolder": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isSymLink": {
                        "description": "",
                        "type": "boolean"
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    }
                }
            },
            "JsonPatchDocument": {
                "type": "object"
            },
            "JsonPatchOperation": {
                "type": "object",
                "properties": {
                    "from": {
                        "description": "The path to copy from for the Move\/Copy operation.",
                        "type": "string"
                    },
                    "op": {
                        "description": "The patch operation",
                        "type": ""
                    },
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value for the operation. This is either a primitive or a JToken.",
                        "type": "object"
                    }
                }
            },
            "value": {
                "type": "object"
            },
            "PropertiesCollection": {
                "type": "object",
                "properties": {
                    "count": {
                        "description": "The count of properties in the collection.",
                        "type": "integer"
                    },
                    "item": {
                        "description": "",
                        "type": "object"
                    },
                    "keys": {
                        "description": "The set of keys in the collection.",
                        "type": "array"
                    },
                    "values": {
                        "description": "The set of values in the collection.",
                        "type": "array"
                    }
                }
            },
            "item": {
                "type": "object"
            },
            "keys": {
                "type": "array"
            },
            "values": {
                "type": "array"
            },
            "PullRequestTabExtensionConfig": {
                "type": "object",
                "properties": {
                    "pullRequestId": {
                        "description": "",
                        "type": "integer"
                    },
                    "repositoryId": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "ReferenceLinks": {
                "type": "object",
                "properties": {
                    "links": {
                        "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
                        "type": "object"
                    }
                }
            },
            "links": {
                "type": "object"
            },
            "ResourceRef": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "ShareNotificationContext": {
                "type": "object",
                "properties": {
                    "message": {
                        "description": "Tagging Message",
                        "type": "string"
                    },
                    "receivers": {
                        "description": "Identities of users who will receive a share notification.",
                        "type": "array"
                    }
                }
            },
            "receivers": {
                "type": "array"
            },
            "SourceToTargetRef": {
                "type": "object",
                "properties": {
                    "sourceRef": {
                        "description": "The source ref to copy. For example, refs\/heads\/master.",
                        "type": "string"
                    },
                    "targetRef": {
                        "description": "The target ref to update. For example, refs\/heads\/master",
                        "type": "string"
                    }
                }
            },
            "SupportedIde": {
                "type": "object",
                "properties": {
                    "downloadUrl": {
                        "description": "The download URL for the IDE.",
                        "type": "string"
                    },
                    "ideType": {
                        "description": "The type of the IDE.",
                        "type": ""
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "protocolHandlerUrl": {
                        "description": "The URL to open the protocol handler for the IDE.",
                        "type": "string"
                    },
                    "supportedPlatforms": {
                        "description": "A list of SupportedPlatforms.",
                        "type": "array"
                    }
                }
            },
            "supportedPlatforms": {
                "type": "array"
            },
            "TeamProjectCollectionReference": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "TeamProjectReference": {
                "type": "object",
                "properties": {
                    "abbreviation": {
                        "description": "Project abbreviation.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "revision": {
                        "description": "Project revision.",
                        "type": "integer"
                    },
                    "state": {
                        "description": "State of the status.",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    },
                    "visibility": {
                        "description": "Project visibility.",
                        "type": ""
                    }
                }
            },
            "TfvcBranch": {
                "type": "object",
                "properties": {
                    "children": {
                        "description": "",
                        "type": "array"
                    },
                    "mappings": {
                        "description": "",
                        "type": "array"
                    },
                    "parent": {
                        "description": "",
                        "type": ""
                    },
                    "relatedBranches": {
                        "description": "",
                        "type": "array"
                    },
                    "TfvcShallowBranchRef": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "children": {
                "type": "array"
            },
            "mappings": {
                "type": "array"
            },
            "parent": {
                "type": "object"
            },
            "relatedBranches": {
                "type": "array"
            },
            "TfvcBranchMapping": {
                "type": "object",
                "properties": {
                    "depth": {
                        "description": "",
                        "type": "string"
                    },
                    "serverItem": {
                        "description": "The path of the item at this point in history (only relevant for File history, not folders)",
                        "type": "string"
                    },
                    "type": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "TfvcBranchRef": {
                "type": "object",
                "properties": {
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "isDeleted": {
                        "description": "Marks if this comment was soft-deleted.",
                        "type": "boolean"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "owner": {
                        "description": "",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "TfvcChange": {
                "type": "object",
                "properties": {
                    "mergeSources": {
                        "description": "List of merge sources in case of rename or branch creation.",
                        "type": "array"
                    },
                    "pendingVersion": {
                        "description": "Version at which a (shelved) change was pended against",
                        "type": "integer"
                    }
                }
            },
            "mergeSources": {
                "type": "array"
            },
            "TfvcChangeset": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "description": "",
                        "type": "string"
                    },
                    "changes": {
                        "description": "",
                        "type": "array"
                    },
                    "checkinNotes": {
                        "description": "",
                        "type": "array"
                    },
                    "collectionId": {
                        "description": "",
                        "type": "string"
                    },
                    "hasMoreChanges": {
                        "description": "",
                        "type": "boolean"
                    },
                    "policyOverride": {
                        "description": "",
                        "type": ""
                    },
                    "teamProjectIds": {
                        "description": "",
                        "type": "array"
                    },
                    "workItems": {
                        "description": "",
                        "type": "array"
                    },
                    "TfvcPolicyOverrideInfo": {
                        "description": "",
                        "type": "object"
                    }
                }
            },
            "checkinNotes": {
                "type": "array"
            },
            "policyOverride": {
                "type": "object"
            },
            "teamProjectIds": {
                "type": "array"
            },
            "TfvcChangesetRef": {
                "type": "object",
                "properties": {
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "author": {
                        "description": "The person that uploaded this attachment",
                        "type": ""
                    },
                    "changesetId": {
                        "description": "",
                        "type": "integer"
                    },
                    "checkedInBy": {
                        "description": "",
                        "type": ""
                    },
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "commentTruncated": {
                        "description": "",
                        "type": "boolean"
                    },
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "TfvcChangesetSearchCriteria": {
                "type": "object",
                "properties": {
                    "author": {
                        "description": "Alias or display name of the author",
                        "type": "string"
                    },
                    "followRenames": {
                        "description": "Whether or not to follow renames for the given item being queried",
                        "type": "boolean"
                    },
                    "fromDate": {
                        "description": "If provided, only include history entries created after this date (string)",
                        "type": "string"
                    },
                    "fromId": {
                        "description": "If provided, only include changesets after this changesetID",
                        "type": "integer"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "itemPath": {
                        "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
                        "type": "string"
                    },
                    "toDate": {
                        "description": "If provided, only include history entries created before this date (string)",
                        "type": "string"
                    },
                    "toId": {
                        "description": "If provided, a version descriptor for the latest change list to include",
                        "type": "integer"
                    }
                }
            },
            "TfvcChangesetsRequestData": {
                "type": "object",
                "properties": {
                    "changesetIds": {
                        "description": "",
                        "type": "array"
                    },
                    "commentLength": {
                        "description": "",
                        "type": "integer"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    }
                }
            },
            "changesetIds": {
                "type": "array"
            },
            "TfvcCheckinEventData": {
                "type": "object",
                "properties": {
                    "TfvcChangeset": {
                        "description": "",
                        "type": "object"
                    },
                    "changeset": {
                        "description": "",
                        "type": ""
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "TfvcHistoryEntry": {
                "type": "object",
                "properties": {
                    "encoding": {
                        "description": "",
                        "type": "integer"
                    },
                    "fileId": {
                        "description": "The file id of the item at this point in history (only relevant for File history, not folders)",
                        "type": "integer"
                    }
                }
            },
            "TfvcItem": {
                "type": "object",
                "properties": {
                    "changeDate": {
                        "description": "",
                        "type": "string"
                    },
                    "deletionId": {
                        "description": "",
                        "type": "integer"
                    },
                    "hashValue": {
                        "description": "MD5 hash as a base 64 string, applies to files only.",
                        "type": "string"
                    },
                    "isBranch": {
                        "description": "",
                        "type": "boolean"
                    },
                    "isPendingChange": {
                        "description": "",
                        "type": "boolean"
                    },
                    "size": {
                        "description": "Size of blob content (in bytes)",
                        "type": "integer"
                    },
                    "version": {
                        "description": "",
                        "type": "integer"
                    }
                }
            },
            "TfvcItemDescriptor": {
                "type": "object",
                "properties": {
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    },
                    "recursionLevel": {
                        "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
                        "type": ""
                    },
                    "version": {
                        "description": "",
                        "type": "string"
                    },
                    "versionOption": {
                        "description": "",
                        "type": ""
                    },
                    "versionType": {
                        "description": "How to interpret version (branch,tag,commit)",
                        "type": ""
                    }
                }
            },
            "TfvcItemRequestData": {
                "type": "object",
                "properties": {
                    "includeContentMetadata": {
                        "description": "Whether to include metadata for all items",
                        "type": "boolean"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "itemDescriptors": {
                        "description": "Collection of items to fetch, including path, version, and recursion level",
                        "type": "array"
                    }
                }
            },
            "TfvcLabel": {
                "type": "object",
                "properties": {
                    "items": {
                        "description": "The last change of items.",
                        "type": "array"
                    }
                }
            },
            "TfvcLabelRef": {
                "type": "object",
                "properties": {
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "description": {
                        "description": "The description of the attachment, can be null.",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "integer"
                    },
                    "labelScope": {
                        "description": "",
                        "type": "string"
                    },
                    "modifiedDate": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "owner": {
                        "description": "",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "TfvcLabelRequestData": {
                "type": "object",
                "properties": {
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "itemLabelFilter": {
                        "description": "",
                        "type": "string"
                    },
                    "labelScope": {
                        "description": "",
                        "type": "string"
                    },
                    "maxItemCount": {
                        "description": "",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "owner": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "TfvcMergeSource": {
                "type": "object",
                "properties": {
                    "isRename": {
                        "description": "Indicates if this a rename source. If false, it is a merge source.",
                        "type": "boolean"
                    },
                    "serverItem": {
                        "description": "The path of the item at this point in history (only relevant for File history, not folders)",
                        "type": "string"
                    },
                    "versionFrom": {
                        "description": "Start of the version range",
                        "type": "integer"
                    },
                    "versionTo": {
                        "description": "End of the version range",
                        "type": "integer"
                    }
                }
            },
            "TfvcPolicyFailureInfo": {
                "type": "object",
                "properties": {
                    "message": {
                        "description": "Tagging Message",
                        "type": "string"
                    },
                    "policyName": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "TfvcPolicyOverrideInfo": {
                "type": "object",
                "properties": {
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "policyFailures": {
                        "description": "",
                        "type": "array"
                    }
                }
            },
            "policyFailures": {
                "type": "array"
            },
            "TfvcShallowBranchRef": {
                "type": "object",
                "properties": {
                    "path": {
                        "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
                        "type": "string"
                    }
                }
            },
            "TfvcShelveset": {
                "type": "object",
                "properties": {
                    "changes": {
                        "description": "",
                        "type": "array"
                    },
                    "notes": {
                        "description": "",
                        "type": "array"
                    },
                    "TfvcPolicyOverrideInfo": {
                        "description": "",
                        "type": "object"
                    },
                    "policyOverride": {
                        "description": "",
                        "type": ""
                    },
                    "workItems": {
                        "description": "",
                        "type": "array"
                    }
                }
            },
            "TfvcShelvesetRef": {
                "type": "object",
                "properties": {
                    "ReferenceLinks": {
                        "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http:\/\/localhost:8080\/tfs\/DefaultCollection\/_apis\/wit\/workItems\/1\" } }`",
                        "type": "object"
                    },
                    "_links": {
                        "description": "",
                        "type": ""
                    },
                    "comment": {
                        "description": "",
                        "type": "string"
                    },
                    "commentTruncated": {
                        "description": "",
                        "type": "boolean"
                    },
                    "createdDate": {
                        "description": "The time the attachment was uploaded",
                        "type": "string"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "IdentityRef": {
                        "description": "",
                        "type": "object"
                    },
                    "owner": {
                        "description": "",
                        "type": ""
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "TfvcShelvesetRequestData": {
                "type": "object",
                "properties": {
                    "includeDetails": {
                        "description": "Whether to include policyOverride and notes Only applies when requesting a single deep shelveset",
                        "type": "boolean"
                    },
                    "includeLinks": {
                        "description": "Whether to include the _links field on the shallow references",
                        "type": "boolean"
                    },
                    "includeWorkItems": {
                        "description": "Whether to include linked work items",
                        "type": "boolean"
                    },
                    "maxChangeCount": {
                        "description": "Max number of changes to include",
                        "type": "integer"
                    },
                    "maxCommentLength": {
                        "description": "Max length of comment",
                        "type": "integer"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "owner": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "TfvcVersionDescriptor": {
                "type": "object",
                "properties": {
                    "version": {
                        "description": "",
                        "type": "string"
                    },
                    "versionOption": {
                        "description": "",
                        "type": ""
                    },
                    "versionType": {
                        "description": "How to interpret version (branch,tag,commit)",
                        "type": ""
                    }
                }
            },
            "UpdateRefsRequest": {
                "type": "object",
                "properties": {
                    "refUpdateRequests": {
                        "description": "",
                        "type": "array"
                    },
                    "updateMode": {
                        "description": "",
                        "type": ""
                    }
                }
            },
            "refUpdateRequests": {
                "type": "array"
            },
            "VersionControlProjectInfo": {
                "type": "object",
                "properties": {
                    "defaultSourceControlType": {
                        "description": "",
                        "type": ""
                    },
                    "TeamProjectReference": {
                        "description": "Represents a shallow reference to a TeamProject.",
                        "type": "object"
                    },
                    "project": {
                        "description": "",
                        "type": ""
                    },
                    "supportsGit": {
                        "description": "",
                        "type": "boolean"
                    },
                    "supportsTFVC": {
                        "description": "",
                        "type": "boolean"
                    }
                }
            },
            "VssJsonCollectionWrapper": {
                "type": "object",
                "properties": {
                    "value": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "VssJsonCollectionWrapperBase": {
                "type": "object",
                "properties": {
                    "count": {
                        "description": "The count of properties in the collection.",
                        "type": "integer"
                    }
                }
            },
            "WebApiCreateTagRequestData": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "WebApiTagDefinition": {
                "type": "object",
                "properties": {
                    "active": {
                        "description": "Whether or not the tag definition is active.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    },
                    "url": {
                        "description": "REST url",
                        "type": "string"
                    }
                }
            },
            "POST_git_pullRequestStatuses_iterationStatus": {
                "type": "object"
            },
            "GET_git_pullRequestStatuses_iterationStatuses": {
                "type": "object"
            },
            "GET_git_pullRequestStatuses_iterationStatus": {
                "type": "object"
            },
            "POST_git_pullRequestStatuses_status": {
                "type": "object"
            },
            "POST_git_pullRequestStatuses_statusIterationInBody": {
                "type": "object"
            },
            "GET_git_pullRequestStatuses_statuses": {
                "type": "object"
            },
            "GET_git_pullRequestStatuses_status": {
                "type": "object"
            }
        }
    }
}